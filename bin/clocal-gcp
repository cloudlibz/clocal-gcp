#!/usr/bin/env node

'use strict';

let fs = require('fs');
const { exec } = require('child_process');
const program = require('commander');
const Configstore = require('configstore');
const chalk = require("chalk");

const path = require('path');
const pkg = require('../package.json');
const getContainerDetails = require('./getContainerDetails');

let commandsArray = [];
let originpath = process.cwd() + "/src/services/cli-commands/";
const commandNameList = [];

fs.readdir(originpath, function (err, items) {
  for (var i = 0; i < items.length; i++) {
    const ServicesCmd = require('../src/services/cli-commands/' + items[i] + '/cmd');
    commandsArray = [ServicesCmd];
    program.version(pkg.version).description(pkg.description);
    
    commandsArray.map(command => {
      commandNameList.push(command.commandName);
      if (command.option)
        program
          .command(command.commandName)
          .action(command.action)
          .option(command.option);
      else
        program
          .command(command.commandName)
          .action(command.action);
    });
  }
  program.command('list').action(() => {
    const commandNames = commandNameList.reduce((prev, current) => {
      return `  ${prev}\n  ${current}`;
    }, '');
    console.log('\nSupported Emulators');
    console.log(commandNames);
  });

  program.command('status').action(()=>{
    const config = new Configstore(path.join(pkg.name, '.containerList'));
    const containers = config.all;
    
    console.log(chalk.green('Service Status\n'));

    Object.keys(containers).forEach(element => {
        exec(`docker container inspect -f '{{.State.Running}}' ${containers[element]}`,(err,stdout,stderr) => {
          if(err){
               return console.log(chalk.blue(`Cloud ${element} : `),'Container is not runnig');
          }
          if(stdout.trim()){
               return console.log(chalk.blue(`Cloud ${element} : `),'Container is runnig');
          }
          return console.log(chalk.blue(`Cloud ${element} : `),'Container is not runnig'); 
      });
    });
  });

  program.parse(process.argv);
  
  if(process.argv.length < 3) 
    program.help();
});
